{"version":3,"file":"utils.js","sources":["uni_modules/uni-forms/components/uni-forms/utils.js"],"sourcesContent":["/**\n * 简单处理对象拷贝\n * @param {Obejct} 被拷贝对象\n * @@return {Object} 拷贝对象\n */\nexport const deepCopy = (val) => {\n\treturn JSON.parse(JSON.stringify(val))\n}\n/**\n * 过滤数字类型\n * @param {String} format 数字类型\n * @@return {Boolean} 返回是否为数字类型\n */\nexport const typeFilter = (format) => {\n\treturn format === 'int' || format === 'double' || format === 'number' || format === 'timestamp';\n}\n\n/**\n * 把 value 转换成指定的类型，用于处理初始值，原因是初始值需要入库不能为 undefined\n * @param {String} key 字段名\n * @param {any} value 字段值\n * @param {Object} rules 表单校验规则\n */\nexport const getValue = (key, value, rules) => {\n\tconst isRuleNumType = rules.find(val => val.format && typeFilter(val.format));\n\tconst isRuleBoolType = rules.find(val => (val.format && val.format === 'boolean') || val.format === 'bool');\n\t// 输入类型为 number\n\tif (!!isRuleNumType) {\n\t\tif (!value && value !== 0) {\n\t\t\tvalue = null\n\t\t} else {\n\t\t\tvalue = isNumber(Number(value)) ? Number(value) : value\n\t\t}\n\t}\n\n\t// 输入类型为 boolean\n\tif (!!isRuleBoolType) {\n\t\tvalue = isBoolean(value) ? value : false\n\t}\n\n\treturn value;\n}\n\n/**\n * 获取表单数据\n * @param {String|Array} name 真实名称，需要使用 realName 获取\n * @param {Object} data 原始数据\n * @param {any} value  需要设置的值\n */\nexport const setDataValue = (field, formdata, value) => {\n\tformdata[field] = value\n\treturn value || ''\n}\n\n/**\n * 获取表单数据\n * @param {String|Array} field 真实名称，需要使用 realName 获取\n * @param {Object} data 原始数据\n */\nexport const getDataValue = (field, data) => {\n\treturn objGet(data, field)\n}\n\n/**\n * 获取表单类型\n * @param {String|Array} field 真实名称，需要使用 realName 获取\n */\nexport const getDataValueType = (field, data) => {\n\tconst value = getDataValue(field, data)\n\treturn {\n\t\ttype: type(value),\n\t\tvalue\n\t}\n}\n\n/**\n * 获取表单可用的真实name\n * @param {String|Array} name 表单name\n * @@return {String} 表单可用的真实name\n */\nexport const realName = (name, data = {}) => {\n\tconst base_name = _basePath(name)\n\tif (typeof base_name === 'object' && Array.isArray(base_name) && base_name.length > 1) {\n\t\tconst realname = base_name.reduce((a, b) => a += `#${b}`, '_formdata_')\n\t\treturn realname\n\t}\n\treturn base_name[0] || name\n}\n\n/**\n * 判断是否表单可用的真实name\n * @param {String|Array} name 表单name\n * @@return {String} 表单可用的真实name\n */\nexport const isRealName = (name) => {\n\tconst reg = /^_formdata_#*/\n\treturn reg.test(name)\n}\n\n/**\n * 获取表单数据的原始格式\n * @@return {Object|Array} object 需要解析的数据\n */\nexport const rawData = (object = {}, name) => {\n\tlet newData = JSON.parse(JSON.stringify(object))\n\tlet formData = {}\n\tfor(let i in newData){\n\t\tlet path = name2arr(i)\n\t\tobjSet(formData,path,newData[i])\n\t}\n\treturn formData\n}\n\n/**\n * 真实name还原为 array\n * @param {*} name \n */\nexport const name2arr = (name) => {\n\tlet field = name.replace('_formdata_#', '')\n\tfield = field.split('#').map(v => (isNumber(v) ? Number(v) : v))\n\treturn field\n}\n\n/**\n * 对象中设置值\n * @param {Object|Array} object 源数据\n * @param {String| Array} path 'a.b.c' 或 ['a',0,'b','c']\n * @param {String} value 需要设置的值\n */\nexport const objSet = (object, path, value) => {\n\tif (typeof object !== 'object') return object;\n\t_basePath(path).reduce((o, k, i, _) => {\n\t\tif (i === _.length - 1) { \n\t\t\t// 若遍历结束直接赋值\n\t\t\to[k] = value\n\t\t\treturn null\n\t\t} else if (k in o) { \n\t\t\t// 若存在对应路径，则返回找到的对象，进行下一次遍历\n\t\t\treturn o[k]\n\t\t} else { \n\t\t\t// 若不存在对应路径，则创建对应对象，若下一路径是数字，新对象赋值为空数组，否则赋值为空对象\n\t\t\to[k] = /^[0-9]{1,}$/.test(_[i + 1]) ? [] : {}\n\t\t\treturn o[k]\n\t\t}\n\t}, object)\n\t// 返回object\n\treturn object;\n}\n\n// 处理 path， path有三种形式：'a[0].b.c'、'a.0.b.c' 和 ['a','0','b','c']，需要统一处理成数组，便于后续使用\nfunction _basePath(path) {\n\t// 若是数组，则直接返回\n\tif (Array.isArray(path)) return path\n\t// 若有 '[',']'，则替换成将 '[' 替换成 '.',去掉 ']'\n\treturn path.replace(/\\[/g, '.').replace(/\\]/g, '').split('.')\n}\n\n/**\n * 从对象中获取值\n * @param {Object|Array} object 源数据\n * @param {String| Array} path 'a.b.c' 或 ['a',0,'b','c']\n * @param {String} defaultVal 如果无法从调用链中获取值的默认值\n */\nexport const objGet = (object, path, defaultVal = 'undefined') => {\n\t// 先将path处理成统一格式\n\tlet newPath = _basePath(path)\n\t// 递归处理，返回最后结果\n\tlet val = newPath.reduce((o, k) => {\n\t\treturn (o || {})[k]\n\t}, object);\n\treturn !val || val !== undefined ? val : defaultVal\n}\n\n\n/**\n * 是否为 number 类型 \n * @param {any} num 需要判断的值\n * @return {Boolean} 是否为 number\n */\nexport const isNumber = (num) => {\n\treturn !isNaN(Number(num))\n}\n\n/**\n * 是否为 boolean 类型 \n * @param {any} bool 需要判断的值\n * @return {Boolean} 是否为 boolean\n */\nexport const isBoolean = (bool) => {\n\treturn (typeof bool === 'boolean')\n}\n/**\n * 是否有必填字段\n * @param {Object} rules 规则\n * @return {Boolean} 是否有必填字段\n */\nexport const isRequiredField = (rules) => {\n\tlet isNoField = false;\n\tfor (let i = 0; i < rules.length; i++) {\n\t\tconst ruleData = rules[i];\n\t\tif (ruleData.required) {\n\t\t\tisNoField = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn isNoField;\n}\n\n\n/**\n * 获取数据类型\n * @param {Any} obj 需要获取数据类型的值\n */\nexport const type = (obj) => {\n\tvar class2type = {};\n\n\t// 生成class2type映射\n\t\"Boolean Number String Function Array Date RegExp Object Error\".split(\" \").map(function(item, index) {\n\t\tclass2type[\"[object \" + item + \"]\"] = item.toLowerCase();\n\t})\n\tif (obj == null) {\n\t\treturn obj + \"\";\n\t}\n\treturn typeof obj === \"object\" || typeof obj === \"function\" ?\n\t\tclass2type[Object.prototype.toString.call(obj)] || \"object\" :\n\t\ttypeof obj;\n}\n\n/**\n * 判断两个值是否相等\n * @param {any} a 值  \n * @param {any} b 值  \n * @return {Boolean} 是否相等\n */\nexport const isEqual = (a, b) => {\n\t//如果a和b本来就全等\n\tif (a === b) {\n\t\t//判断是否为0和-0\n\t\treturn a !== 0 || 1 / a === 1 / b;\n\t}\n\t//判断是否为null和undefined\n\tif (a == null || b == null) {\n\t\treturn a === b;\n\t}\n\t//接下来判断a和b的数据类型\n\tvar classNameA = toString.call(a),\n\t\tclassNameB = toString.call(b);\n\t//如果数据类型不相等，则返回false\n\tif (classNameA !== classNameB) {\n\t\treturn false;\n\t}\n\t//如果数据类型相等，再根据不同数据类型分别判断\n\tswitch (classNameA) {\n\t\tcase '[object RegExp]':\n\t\tcase '[object String]':\n\t\t\t//进行字符串转换比较\n\t\t\treturn '' + a === '' + b;\n\t\tcase '[object Number]':\n\t\t\t//进行数字转换比较,判断是否为NaN\n\t\t\tif (+a !== +a) {\n\t\t\t\treturn +b !== +b;\n\t\t\t}\n\t\t\t//判断是否为0或-0\n\t\t\treturn +a === 0 ? 1 / +a === 1 / b : +a === +b;\n\t\tcase '[object Date]':\n\t\tcase '[object Boolean]':\n\t\t\treturn +a === +b;\n\t}\n\t//如果是对象类型\n\tif (classNameA == '[object Object]') {\n\t\t//获取a和b的属性长度\n\t\tvar propsA = Object.getOwnPropertyNames(a),\n\t\t\tpropsB = Object.getOwnPropertyNames(b);\n\t\tif (propsA.length != propsB.length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (var i = 0; i < propsA.length; i++) {\n\t\t\tvar propName = propsA[i];\n\t\t\t//如果对应属性对应值不相等，则返回false\n\t\t\tif (a[propName] !== b[propName]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\t//如果是数组类型\n\tif (classNameA == '[object Array]') {\n\t\tif (a.toString() == b.toString()) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\n"],"names":[],"mappings":"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"}